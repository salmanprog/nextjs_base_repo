// ---------- GENERATOR & DATASOURCE ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ---------- MODELS ----------
model UserRole {
  id           Int       @id @default(autoincrement())
  title        String    @unique @db.VarChar(100)
  slug         String    @unique @db.VarChar(100)
  description  String?   @db.VarChar(255)
  type         RoleType  @default(USER)
  isSuperAdmin Boolean   @default(false)
  status       Boolean   @default(true)
  createdAt    DateTime? @db.Timestamp(6)
  updatedAt    DateTime? @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)

  users User[]

  @@map("user_role")
}

enum RoleType {
  ADMIN
  USER
}

model UserApiToken {
  id            Int       @id @default(autoincrement())
  userId        Int
  api_token     String
  device_type   String?
  device_token  String?
  platform_type String?
  platform_id   String?
  ip_address    String?
  user_agent    String?
  created_at    DateTime? @default(now())
  updated_at    DateTime? @updatedAt
  deleted_at    DateTime?

  // Relation to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id                Int         @id @default(autoincrement())
  userGroupId       Int?
  createdBy         Int         @default(0)
  userType          UserType    @default(USER)
  name              String?     @db.VarChar(255)
  username          String      @unique @default("temp_username") @db.VarChar(150)
  slug              String      @unique @default("temp_slug") @db.VarChar(150)
  email             String?     @unique @db.VarChar(150)
  mobileNumber      String?     @unique @db.VarChar(150)
  dob               String?     @db.VarChar(250)
  age               Int         @default(0)
  gender            Gender      @default(MALE)
  profileType       ProfileType @default(PUBLIC)
  password          String      @db.VarChar(255)
  imageUrl          String?     @db.Text
  status            Boolean     @default(true)
  isEmailVerify     Boolean     @default(false)
  emailVerifyAt     DateTime?
  platformType      String      @default("custom")
  platformId        String?
  emailOtp          String?     @db.VarChar(100)
  emailOtpCreatedAt DateTime?
  createdAt         DateTime?   @db.Timestamp(6)
  updatedAt         DateTime?   @db.Timestamp(6)
  deletedAt         DateTime?   @db.Timestamp(6)

  // âœ… Relation to UserRole
  userRole UserRole? @relation(fields: [userGroupId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // âœ… Add this new relation ðŸ‘‡
  apiTokens UserApiToken[]

  @@index([name])
}

// ---------- ENUMS ----------
enum UserType {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}

enum ProfileType {
  PUBLIC
  PRIVATE
}
